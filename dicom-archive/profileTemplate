=pod
# -----------------------------------------------------------------------------------------------
  WHAT THIS IS:
  Although someone might argue that this is not a config file anymore... this is in fact a config
  WHAT THIS IS FOR:
  For users of the neurodb system... or actually the ones that believe in tarchiving their universe
  WHAT THIS IS NOT:
  A solution for an extant lack of productivity in writing papers
# -----------------------------------------------------------------------------------------------
=cut

=pod
# SECTION I
# -----------------------------------------------------------------------------------------------
  DATABASE settings 
  for database instance you are connecting to
  required: db_name, $db_user, $db_pass, $db_host
# -----------------------------------------------------------------------------------------------
=cut

@db = ('DBNAME','DBUSER', 'DBPASS', 'DBHOST');

=pod
# SECTION II
# -----------------------------------------------------------------------------------------------
  tarchiveloader settings
  Do not use a trailing / for data_dir
# -----------------------------------------------------------------------------------------------
=cut


$data_dir       = '/PATH/TO/DATA/location';     # where the data goes
$bin_dir        = '/PATH/TO/BIN/location';      # where the imaging scripts go
$prefix         = "project";                    # study prefix or study name
$mail_user      = "yourname\@example.com";      # who will be notified
$get_dicom_info = "/PATH/TO/get_dicom_info.pl"; # path to get_dicom_info.pl
$horizontalPics = 1;
$no_nii         = 0;                            # 0=create nifti files, 1=don't create nifti files

# if converter is set to dcm2mnc, the c-version of dcm2mnc will be used. If however you want 
# to use any of the various versions of the perl converter dicom_to_minc of mydcm2mnc you will have 
# to specify what it is called and the uploader will try to invoke it. 
$converter      = "dcm2mnc";

# where to store the library of used tarchives
# if this is not set they will not be moved
$tarchiveLibraryDir = '/PATH/TO/dicomlib/'; 

# which element of the tarchive table should be used to getPSC(), being either PatientID or PatientName
$lookupCenterNameUsing = 'PatientName';

# should the upload create candidates when needed? 0/1
$createCandidates = 1;

###1 if the qsub/sge is used 0 otherwise##
##set false by default##
$if_sge = 0;

###1 if site is used or 0 otherwise####
###It is used by default
$if_site = 1;

### DTIPrep pipeline options
## If DTI acquisitions are performed, specify
# 1. Number of volumes in native DTI acquisitions
$DTI_volumes    =   '65';
# 2. Scan type of native T1 acquisition (as in mri_scan_type table)
$t1_scan_type   =   'adniT1';
# 3. Max number of directions that can be rejected to PASS QC
$reject_thresh  =   19;
## Optionaly, set this two options:
# 4a. path to niak quarantine to use if mincdiffusion will be run (option -runMincdiffusion set when calling DTIPrep_pipeline.pl) 
$niak_path      =   '/opt/niak-0.6.4.1/';
# 4b. DTIPrep protocol step at which a secondary QCed dataset is produced (for example one without motion correction and eddy current correction would be saved at INTERLACE_outputDWIFileNameSuffix step of DTIPrep)
$QCed2_step   =   'INTERLACE_outputDWIFileNameSuffix';


=pod
# SECTION III
# -----------------------------------------------------------------------------------------------
  custom settings
  these functions are very specific for any given study. Using them seems to be the only way of
  having one system that rules them all...
# -----------------------------------------------------------------------------------------------
=cut

sub getIncomingDir {
    my $site = shift;
    return $tarchiveLibraryDir;
}
# extracts the subject and timepoint identifiers from the patient name 
# assumes identifers are stored as <PSCID>_<DCCID>_<visit> in PatientName field, where <visit> is 3 digits.
sub getSubjectIDs {
    my ($patientName, $patientID, $scannerID, $dbhr) = @_;

    my %subjectID; # Will stored subject IDs.
    
     # If patientName is phantom scan or test scan
     # CandID is scanner DCCID (based on site alias)
     # visitLabel is scan patient name
     # Set createVisitLable to 
     #      a. 1 if imaging pipeline should create the visit label (when visit label has not been created yet in the database. 
     #      b. 0 if imaging pipeline should not create the visit label (when visit label has not been created yet in the database. 
    if ($patientName =~ /PHA/i or $patientName =~ /TEST/i) {

        $subjectID{'CandID'}    = NeuroDB::MRI::my_trim(NeuroDB::MRI::getScannerCandID($scannerID, $dbhr));
        $subjectID{'visitLabel'}= NeuroDB::MRI::my_trim($patientName);
        $subjectID{'createVisitLabel'} = 1; 

     # If patient match PSCID_DCCID_VisitLabel
     # Determine PSCID, DCCID and visitLabel based on patient name
    } elsif ($patientName =~ /([^_]+)_(\d+)_([^_]+)/) {

        $subjectID{'PSCID'}         = NeuroDB::MRI::my_trim($1);
        $subjectID{'CandID'}        = NeuroDB::MRI::my_trim($2);
        $subjectID{'visitLabel'}    = NeuroDB::MRI::my_trim($3);
        $subjectID{'createVisitLabel'} = 0; 

        print "PSCID is: "            . $subjectID{'PSCID'}      . 
                "\n CandID id: "      . $subjectID{'CandID'}     . 
                "\n visit_label is: " . $subjectID{'visitLabel'} . "\n";

    }
   
    # Return subjectIDs
    return \%subjectID;
}

# determines if a given subjectID is a phantom or not
# returns 1 if a phantom, 0 for non-phantom
sub isPhantom {
    my $subjectIDref = shift;
    if($subjectIDref->{'PSCID'} =~ /PHA/i) {
        return 1;
    }
    return 0;
}

# ----------- OPTIONAL SUBROUTINE
# If you don't want to upload all types of images you can specify the complete protocol 
# for all types and limit the upload using the protocol names
sub isFileToBeRegisteredGivenProtocol {
    my $acquisitionProtocol = shift;
    if($acquisitionProtocol eq 't1' or $acquisitionProtocol eq 't2' or $acquisitionProtocol eq 'pd' or $acquisitionProtocol eq 'mrs' or $acquisitionProtocol =~ /despot/) {
        return 1;
    }
    return 0;
}

# ----------- OPTIONAL SUBROUTINE
# Takes a NeuroDB::File object, and manipulates its parameters
# in this case, removes all parameters of length > 1000
sub filterParameters {
    my $fileRef = shift;
    my $file = $$fileRef;
    my $parametersRef = $file->getParameters();

    foreach my $key (keys %{$parametersRef}) {
        if(($key ne 'header') && (length($parametersRef->{$key}) > 1000)) {
            #print "\n\tFilter active on: $key with length ".length($parametersRef->{$key})."\n"; 
            $file->removeParameter($key);
        }
    }
}


# ----------- OPTIONAL SUBROUTINE
# Fetch site, CandID and Visit info from DTI folder.
sub  get_DTI_Site_CandID_Visit {
    my ($dir) =   @_;

    if  ($dir =~  /\/*([0-9]+)\/([N,P][A,R][P,E]EN00)/i)  {   # when only one site
        my  $site   =   "PreventAD";                                  # when only one site
        my  $subjID =   $1;
        my  $visit  =   $2;
        return  ($site,$subjID,$visit);
    }else{
        return  undef;
    }
}
